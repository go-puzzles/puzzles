// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: pb/example.proto

package examplepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExampleHelloService_SayHello_FullMethodName = "/examplepb.ExampleHelloService/SayHello"
)

// ExampleHelloServiceClient is the client API for ExampleHelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleHelloServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type exampleHelloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleHelloServiceClient(cc grpc.ClientConnInterface) ExampleHelloServiceClient {
	return &exampleHelloServiceClient{cc}
}

func (c *exampleHelloServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, ExampleHelloService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleHelloServiceServer is the server API for ExampleHelloService service.
// All implementations must embed UnimplementedExampleHelloServiceServer
// for forward compatibility
type ExampleHelloServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedExampleHelloServiceServer()
}

// UnimplementedExampleHelloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExampleHelloServiceServer struct {
}

func (UnimplementedExampleHelloServiceServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedExampleHelloServiceServer) mustEmbedUnimplementedExampleHelloServiceServer() {}

// UnsafeExampleHelloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleHelloServiceServer will
// result in compilation errors.
type UnsafeExampleHelloServiceServer interface {
	mustEmbedUnimplementedExampleHelloServiceServer()
}

func RegisterExampleHelloServiceServer(s grpc.ServiceRegistrar, srv ExampleHelloServiceServer) {
	s.RegisterService(&ExampleHelloService_ServiceDesc, srv)
}

func _ExampleHelloService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleHelloServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExampleHelloService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleHelloServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExampleHelloService_ServiceDesc is the grpc.ServiceDesc for ExampleHelloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExampleHelloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "examplepb.ExampleHelloService",
	HandlerType: (*ExampleHelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ExampleHelloService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/example.proto",
}
